Compile Time Polymorphism

In this type of Polymorphism, we know which thing exists in which forms during Compilation.

------------------------------------------------------------
There are two types of Compile Time Polymorphism.
    1) Function overloading(can't create two Functions with same name)
    2) Operator overloading(Whenever we use "+" keyword say hello)

/////////////////////////////////////////////// Function overloading
Creating same-named functions


class A
{
public:
    void sayHello()
    {
        cout << "Hello Jenny";
    }

    //'void A::sayHello()' cannot be overloaded
    // void sayHello()
    // {
    //     cout << "Hello Jay" ;
    // }

    // With the above 2 same functions we were getting an error of 'void A::sayHello()' cannot be overloaded so
    // What we can do is we can pass the string to the function

    void sayHello(string name) // now we can access both same-named functions
    {
        cout << "Hello" << name ;
    }
};

int main()
{

    A object1;
    object1.sayHello();
    object1.sayHello("Jay");
    return 0;
}


in conclusion, just pass more arguments or change the type of the previous argument

/////////////////////////////////////////////// Operator Overloading

We know that + Operator is used to add or concat string   
But now what we want is Whenever we use + Operator it should say Hello Jay

Now let's see how we can overload an Operator

with + Operator, we have to do subtraction.

+ has 2 operants. a + b
and ++ has 1 = a++ or ++a




Some Operators can be overloaded in C++;
| Category                  | Operators                                     |
|---------------------------|-----------------------------------------------|
| Arithmetic Operators      | +, -, *, /, %                                 |
| Comparison Operators      | ==, !=, <, >, <=, >=                          |
| Unary Operators           | +, -, ++, --, !, ~                            |
| Assignment Operators      | =, +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>=   |
| Bitwise Operators         | &, |, ^, <<, >>                               |
| Function Call Operator    | ()                                            |
| Subscript Operator        | []                                            |
| Member Access Operators   | ->, ->*, .                                    |
| Other Operators           | ',' , (), [], new, delete                     |


Some Operators can't be overloaded in C++;
| Operators                   |
|-----------------------------|
| :: (Scope resolution)       |
| . (Member access)           |
| .* (Pointer to member)      |
| ?: (Conditional)            |
| sizeof (Size of)            |
| typeid (Type information)   |
| const_cast                  |
| dynamic_cast                |
| static_cast                 |
| reinterpret_cast            |
| & (Address of)              |
| , (Comma)                   |
| ->* (Pointer to member)     |
| new (Memory allocation)     |
| delete (Memory deallocation)|
| .*, ->* (Pointer to member) |
| # (Preprocessor)            |


