Here we are going to discuss behind-the-scene of 
Car car1

when we do Car car1 we are allocating 2 blocks in memory 1 of type string for name and 1 for speed of type of int. Both will take their memory (like int will take 4 bytes).

The Size of car1 will be the sum of the data type of their properties. 
In getter setter file the size of car1 is 28(4 for int and 24 for string)

1. Padding is introduced in memory allocation to ensure proper alignment of data within structures. CPUs have specific memory alignment requirements for different types of data. When you have a structure containing different data types, the compiler might insert "padding bytes" between members to align them according to the CPU's requirements. 

2. Greedy alignment refers to the practice of arranging the members of a structure or class in such a way that padding is minimized. By placing members with larger alignment requirements before those with smaller alignment requirements, you can potentially reduce the amount of padding required.
In languages like C++, where memory layout has a significant impact on performance due to cache lines and memory access patterns, arranging members to minimize padding can lead to better memory utilization and potentially improved runtime efficiency