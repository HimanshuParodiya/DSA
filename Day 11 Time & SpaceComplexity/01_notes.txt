1) Time Complexity
        --> It is the amount of time taken by an algorithm to run as a function of the length of the input.


-------------------------
2) Why?
    i) for making better programs
    ii) for comparison of algorithms
we can say which algorithm is good because it will give us different performances on different computers or systems so we use time Complexity to standardize it.



-------------------------
3) Unit 
    As we say, we have to go 5 Km, so now we know it by Km. We also have the unit for the time Complexity.

    i) Big O notation ==> It gives us upper bond. (i can code at most 24 hr not more than that), shows the worst case Complexity
    ii) Theta ==> It gives us average case Complexity.
    iii) Omega ==> Lower bond. (i can code at least 3hr)

    we will deep dive into it after some lecture 


-------------------------
4) Big O Notation 
    i) Constant Time = O(1)
        example = for(int i = 0; i <= 11; i++)  here we know that this loop with iterate 11 times so this is constant



    ii) Linear Time = O(n)
        example = for(int i = 0; i <= n; i++)  here time is linear beacuse it will go to n


    iii) Logarithmic Time = O(logn)
    When the input size is reduced by half, maybe when iterating,
        example = Binary Search


    iv) Quadriatic Time = O(n^2)
        example =  for(int i = 0; i <= n; i++)
                         for(int j = 0; j <= n; j++) here 2 loops are there so O(n^2)

    iv) cube Time = O(n^3)
        example =  for(int i = 0; i <= n; i++)
                         for(int j = 0; j <= n; j++)
                                for(int k = 0; k <= n; k++) here 3 loops are there so O(n^3)




Complexity level

    O(n!)           High Complexity (bad)
    O(2^n)
    O(n^3)
    O(n^2)
    O(nlogn)
    O(n)
    O(logn)
    O(1)            least Complexity(good)



5) How to Avoid TLE 
    constraints
        1 < n < 10^6


            Time Complexity

    < [10..11]      |   O(n!),O(n^6)
    < [15..18]      |   O(2^n* n^2)
    < 100           |   O(n^4)
    < 400           |   O(n^3)
    < 2000          |   O(n^2*logn)
    < 10^4          |   O(n^2)
    < 10^6          |   O(nlogn)
    < 10^8          |   O(n),O(logn)

now for the above constraint line no. 78 matches thats mean the worst case can be O(nlogn) and we can use O(nlogn) , O(n),O(logn) these two 
if the constraint match line no. 75 then worst case can be 0(n^3) so we can use 0(n^3),  O(n^2*logn),  O(n^2), O(nlogn),  O(n),O(logn)

now how to approach the problem with this 
    We have bigO notation logic so we can think which one can slove my all test cases



6) how much memory will any algorithm take?
    here we look for variable and arr vector etc