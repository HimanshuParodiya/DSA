Middle of Linked List

1) find the length of the linked list
length can be even or odd 
mid = len/2 

let's say = 1 5 8 9 11

5/2 = 2 + 1 = 3 
so in the case of the odd 3rd node is the middle
-------------------------------
let's say = 1 5 8 9 11 13

6/2 = 3 + 1 = 4 
so in the case of the even 4th node is the middle


-------------------------------
Approach 

1st find the length of the linked list 

apply the formula of len/2
point head with pointer temp

then traverse temp till mid node where temp will go to next node then the head will point to mid 
and we will return the temp



 
class Solution {
private:
    int getLength(ListNode* head){ // function to find the length of the linked list
        int len = 0;
        while(head != NULL){
            len++;
            head = head->next;
        }
        return len;
    }

public:
    ListNode* middleNode(ListNode* head) {
		// int len = getLength(head); // finding the length of the linked list
        // int answer = (len / 2) + 1;
        // return answer; // here we are returning an element but we have to return node 
        // ---------------



        // Now let's do for node
        int len = getLength(head); // finding the length of the linked list
        int answer = (len / 2); // Now we are removing +1 because +1 will give us the position of the middle of the node

        // Pointing to the middle node
        ListNode* temp = head; // pointing to head
        // int count = 0;
        while(answer>0){ // go till middle node
            temp = temp -> next; // temp going to next node till the middle node
            answer--;
        }

        return temp; // now temp(head) is pointing to the middle node. So, it will return a linked list from the middle 
    }
};

// time complexity is O(n)
// explanation of time complexity 
// O(n) for finding the length of the linked list
// O(n/2) for pointing head to the middle node 
// At the end total time complexity is O(n)


-----------------------------------
// Now, can we optimize this code  and remove the O(n/2)

can we say,
A can run 2m/s 
B can run 1m/s 

so after 10sec 
A will cover 20m
and B will be 10m 

so B is exactly half of a 
B = A/2

So can we say if we create 2 pointers and A traversing 2 nodes at once and B traversing 1 node at once B will point to the middle of the linked list.

//Let's see the implementation 

1 2 3 4 5 NULL == middle is 3


create 2 pointer
fast and slow
Node* fast = head -> next;
Node* slow = head;
/<
slow is at 1
and fast is at 2

fast will cover 2 nodes at once and slow will cover 1 node at once

traverse till fast is not reaches NULL