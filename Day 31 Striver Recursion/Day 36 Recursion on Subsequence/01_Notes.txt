In recursion and DP 
we will see a lot of problems that involve particular term subsequence.


1) What is the definition of subsequence?
ans) Contiguous/Non-Contiguous Sequence which follows the order. This is called Subsequence.

Let's see the example.......

arr = {3,1,2};

Subsequences are ⤵️
{} = Contiguous
3 = Contiguous
1 = Contiguous
2 = Contiguous
3,1 = Contiguous
1,2 = Contiguous
3,2 = Non-Contiguous
3,1,2 = Contiguous


We can solve this problem using Power Set and Recursion.

// 1) Power Set

before that let's see, how to find that ith bit is set or not.

Let's see what is set 

if the ith element is 1 then it is set 
if the ith element is 0 then it is not set

So how we can find it 

n = 101
index = 2,1,0(in bit index start form right)
ith = 2

  101
 &100
 =100 !=0  (set) 

 if ith = 1 

  101
 & 10
 =000 == 0( not a set)


 how to set 1 under ith term 
 1<<i ( where i is the ith term)

 (n & 1<<i) != 0 (then it is set)


// Now let's come back to our approach

as we know the size of our output is 2^n 

so we will write numbers from 0 to n-1

let's say s = "abc" index = 012

number  | Bit Representation
index   | 2 1 0
_________________
0       | 0 0 0 = everything is 0 so we are not picking anything so the output is " "
1       | 0 0 1 = 0th index is 1 so we are picking 0th index (a)
2       | 0 1 0 = 1th index is 1 so we are picking 1th index (b)
3       | 0 1 1 = 0th and 1st index is 1 so we are picking 0th and 1st index (a,b)
4       | 1 0 0 = 2nd index is 1 so we are picking 2nd index (c)
5       | 1 0 1 = 0th and 2nd index is 1 so we are picking 0th and 2nd index (a,c)
6       | 1 1 0 = 1st and 2nd index is 1 so we are picking 1th and 2nd index (b,c)
7       | 1 1 1 = 0th, 1st and 2nd index is 1 so we are picking 0th, 1st and 2nd index (a,b,c)

0 means we are not picking the element
1 means we are picking the element 

pseudo code

loop for(num(0--(2^n)-1))

or in the form of a bit, we can write 
 for(num(0--(1>>n)-1))
 1>>n mean 2^2


 for(num(0--(1>>n)-1))
    subStr = ""
        for(i(0--n-1))
            check for a set or not
                if(num &(1<<i))
                    subStr += s[i]
    cout<subStr; 