// link = https://leetcode.com/problems/permutations/description/ 

We have given an array and we have to print all the permutations.

arr = [1,2,3];
permutations = [[1,2,3] , [1,3,2] , [2,1,3] , [2,3,1] , [3,1,2] , [3,2,1]]




// solution 1 using extra space 

1 thing we have seen total permutations are equal to the factorial of the size of the array (in this case 3! = 3 x 2 = 6)

Approach = 

I will pick an element and mark the index that I have picked up 
then I will check did i picked it up if not then pick it
arr = [1,2,3]

                    func(ds[],map[])
|                        |                        |
func(ds[1], map[0])     func(ds[2], map[1])     func(ds[3], map[2])

ds pick 0th indices(1) and mark its indices as 1 in the map and so on for another case  
Start: ds = [], map = []

Level 0:
                         []
                /        |        \
           [1]          [2]         [3]
          / | \        / | \       / | \
func([1], [1,0,0]) func([2], [0,1,0]) func([3], [0,0,1])

Level 1:
func([1,2], [1,1,0]) func([1,3], [1,0,1]) func([2,1], [1,1,0]) func([2,3], [0,1,1]) func([3,1], [1,1,0]) func([3,2], [0,1,1])

Level 2:
func([1,2,3], [1,1,1]) func([1,3,2], [1,1,1]) func([2,1,3], [1,1,1]) func([2,3,1], [1,1,1]) func([3,1,2], [1,1,1]) func([3,2,1], [1,1,1])


Time complexity = n! x n
Space complexity = O(n) + O(n)