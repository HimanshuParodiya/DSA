This time we will optimize the previous approach just by eliminating the checking left, upper and bottom diagonal. We can easily do that using hashing 
 
Using HashMap

// Checking left row 

ans 3  ✅
[
        Col0,   Col1,   Col2   Col3

   Row0  [ ],     [x],     [*],    [x],
    
   Row1  [*],     [x],     [ ],    [x],
    
   Row2  [ ],     [x],     [ ],    [*],

   Row3  [ ],     [*],     [ ],    [ ],
]

if i maintain a vector of size n(row) 
[0, 1, 2, 3] 
and mark the place queens row (in the above case)

[0,1,0,1] (0 = not place at this row , 1 = place at this row)

now we can't place the queen on index 1 and 3




// Checking downward diagonal

Let's create an 8x8 chess board to get a good understanding


ans 3  ✅
[
         Col0,    Col1,    Col2    Col3    Col4    Col5    Col6    Col7

   Row0  [0],     [1],     [2],    [3],    [4],    [5],    [6],     [7],

   Row1  [1],     [2],     [3],    [4],    [5],    [6],    [7],     [8],

   Row2  [2],     [3],     [4],    [5],    [6],    [7],    [8],     [9],

   Row3  [3],     [4],     [5],    [6],    [7],    [8],    [9],     [10],

   Row4  [4],     [5],     [6],    [7],    [8],    [9],    [10],    [11],

   Row5  [5],     [6],     [7],    [8],    [9],    [10],   [11],    [12],

   Row6  [6],     [7],     [8],    [9],    [10],   [11],   [12],    [13],

   Row7  [7],     [8],     [9],    [10],   [11],   [12],   [13],    [14],
   
]

[rowIndex + colIndex]

did you notice all the diagonals have the same value

if we place Q at Col4 Row4 (8) we will check if there is another Q placed at the same value (diagonally)


// Create HashMap 

we will create a HashMap of size (n = 8) (max = 14, min = 0) 
so size will be (2n - 1)

HashMap =[
       [],[],[],[],[],[],[],[],[],[],[],[],[],[],[],
index   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14
]

if we place Q at Row5 Col3 
so our HashMap will become


[
       [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [],
index   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14
]

row5 + col 3 = 8



// Checking upward diagonal

By just applying the formula we can get it 

formula = (n - 1) + (col - row)

n = 4 

(Row0,Col3) formula = 3 + (3-0)
        = 6

(Row1,Col3) formula = 3 + (3-1)
        = 5

(Row2,Col3) formula = 3 + (3-2)
        = 4

(Row3,Col3) formula = 3 + (3-3)
        = 3

(Row3,Col2) formula = 3 + (2-3)
        = 2

(Row3,Col1) formula = 3 + (2-3)
        = 1

(Row3,Col0) formula = 3 + (2-3)
        = 0


[
        Col0,    Col1,    Col2    Col3

   Row0  [3],     [4],     [5],    [6],
    
   Row1  [2],     [3],     [4],    [5],
    
   Row2  [1],     [2],     [3],    [4],

   Row3  [0],     [1],     [2],    [3],
]

now did you see the relation between the upper diagonal



// Create HashMap 

we will create a HashMap of size (n = 8) (max = 14, min = 0) 
so size will be (2n - 1)

HashMap =[
       [],[],[],[],[],[],[],[],[],[]
index   0  1  2  3  4  5  6  7  8  9 
]

if we place Q at 
(Row3,Col2) formula = 3 + (2-3)
        = 2
so our HashMap will become


[
       [], [], [1], [], [], [], [], [], [], []
index   0   1   2   3   4   5   6   7   8   9 
]

row5 + col 3 = 8
